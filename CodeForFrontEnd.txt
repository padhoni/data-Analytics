index.html


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible"   
    content="IE=edge">
        <meta name="viewport" content="width=device-width,        initial-scale=1.0">
    <title>Chatbot for research project</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" 
        integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
    </head>

<body>
    <div class="container mt-5 w-50">
        <h1 class="text-center">Chatbot for Testing</h1>
        <div class="card">
            <div class="card-header">
                Chat History
            </div>
            <ul id="chat-history" class="list-group list-group-flush">
            </ul>
        </div>
<div class="input-group">
            <span class="input-group-text">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><g fill="currentColor">
                    <path d="M11 6a3 3 0 1 1-6 0a3 3 0 0 1 6 0z"/><path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/></g>
                </svg>&nbspUser (You)
            </span>
            <textarea id="user-input" class="form-control" aria-label="With textarea"></textarea>
 </div>
        <div class="text-center">
            <button id="submit" type="button" class="btn btn-primary mt-2" >Submit PrompButton</button>
<div id="spinner" class="spinner-grow text-primary visually-hidden mt-2" role="status">
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" 
    integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
    <script src="js/script.js"></script>
</body>
</html>

                          

applicationFile.js

const openai = require('openai');
require('dotenv').config();
const express = require('express');
const path = require('path');
const app = express();
const port = 8080 || process.env.PORT;
app.use(express.json());
app.use(express.static('public'));
app.use(express.urlencoded({ extended: true }));

//OpenAI Keys
const configuration = new openai.Configuration({
    organization: process.env.OPENAI_ORG,
    apiKey: process.env.OPENAI_API_KEY,
});

const openaiApi = new openai.OpenAIApi(configuration);
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '/index.html'));
});

app.post('/chat', async (req, res) => {
    const messages = req.body.messages;
    const model = req.body.model;
    const tempVar = req.body.temp;
    const completion = await    
    openaiApi.createChatCompletion({
        model: model,
        messages: messages,
        temperature: tempVar,
    });
    res.status(200).json({ result: completion.data.choices });
});

app.listen(port, () => {
    console.log(`App listening on port ${port}`);
});



                     scriptFile.js


const submit = document.getElementById("submit");
const responseData =    
document.getElementById("response");
const userInput = document.getElementById("user-input");
const chatHistoryLoad = document.getElementById("chat-history");
const loading = document.getElementById("spinner");
let promptResponses = [];


//API call
const generateResponse = async () => {
    //Get the user input
    loading.classList.remove("visually-hidden");
    submit.classList.add("visually-hidden");
    const input = userInput.value;
    const response = await fetch('/chat', {
        method: 'POST',
        body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [{"role": "user", "content": input}],
            temp: 0.6
        }), 
        headers: {
            'Content-Type': 'application/json'
        }
    });

    const responseData = await response.json();
    const message = responseData.result[0].message.content;
    console.log(message);
    promptResponses.push({question: input, response:    message});
    //Clear fields
    userInput.value = "";

    const historyElement = document.createElement('div');
    historyElement.innerHTML = `<li class="list-group- 
    item">Prompt: ${input}</li>
<li class="list-group-item"> Response:   ${message}</li>`;  
    chatHistoryLoad.append(historyElement);
    loading.classList.add("visually-hidden");
    submit.classList.remove("visually-hidden");

}

submit.onclick = generateResponse;


		 .env File

# Do not share your OpenAI API key with anyone! It should remain a secret.
OPENAI_API_KEY=sk-saFN1xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXZIh
OPENAI_ORG=org-eSXXXXXXXXXXXXXXXXXXXXXHj
